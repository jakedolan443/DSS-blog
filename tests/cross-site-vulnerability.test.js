// cross-site-vulnerability.test.js
//
// Purpose: Test for cross-site scripting/request forgery vulnerability
//
// Authors: Charlie Gaskin
// Date: 09/05/2025

const request = require('supertest');
const knex = require('knex');
require('dotenv').config();

const app = require('../app');

const db = knex({
  client: 'pg',
  connection: {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
  },
});

let testUserId;
let authToken;
let postId;

beforeAll(async () => {
  // Create a test user and log in
  await request(app)
    .post('/register')
    .send({ username: 'testuser', password: 'testpass' });

  const loginRes = await request(app)
    .post('/login')
    .send({ username: 'testuser', password: 'testpass' });

  authToken = loginRes.body.token;

  const user = await db('users').where({ username: 'testuser' }).first();
  testUserId = user.id;

});
afterAll(async () => {
  await db('comments').del();
  await db('posts').del();
  await db('users').del();
  await db.destroy();
  console.log('Cross Site Vulnerability test completed.');
});

describe('Security Tests: Cross Site Vulnerability', () => {
  test('XSS In Post Content', async () => {
    const maliciousContent = `<script>alert('xss')</script><b>bold</b>`;

    const res = await request(app)
      .post('/posts')
      .set('Authorization', `Bearer ${authToken}`)
      .send({
        user_id: testUserId,
        title: 'Testing XSS Within Posts',
        content: maliciousContent,
      });

    expect(res.statusCode).toBe(201); 
    expect(res.body.post.content).not.toContain('<script>');
    expect(res.body.post.content).not.toContain('alert');
    expect(res.body.post.content).not.toContain('<b>');

    postId = res.body.post.id;
  });

  test('XSS In Post Comments', async () => {
    const res = await request(app)
      .post(`/posts/${postId}/comments`)
      .set('Authorization', `Bearer ${authToken}`)
      .send({
        user_id: testUserId,
        content: `<img src=x onclick=alert(1)> totally not doing damage`,
      });

    expect(res.statusCode).toBe(201);
    expect(res.body.comment.content).not.toContain('onclick');
    expect(res.body.comment.content).not.toContain('<script>');
    expect(res.body.comment.content).toContain('totally not doing damage');
  });

  test('Check GetPosts doesnt contain harmful scripts', async () => {
    const res = await request(app).get('/posts').send();
    expect(res.statusCode).toBe(200);
    for (const post of res.body) {
      expect(post.content).not.toMatch(/<script>|onclick|javascript:/i);
    }
  });
});

test('Rejection of invalid/fake token', async () => {
  const fakeToken = 'Bearer $wYiwJHtwIauXefAZRIyjaY9jRElGGD4OHe';

  const res = await request(app)
    .post('/posts')
    .set('Authorization', fakeToken)
    .send({
      user_id: testUserId,
      title: 'Fake Token Test',
      content: 'Not a real token buddy!',
    });

  expect([401, 403]).toContain(res.statusCode);
  expect(res.body.message).toMatch(/Invalid token/i);
});
